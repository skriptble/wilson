bson/builder/array_constructor.go:10:6: exported type ArrayElementer should have comment or be unexported
bson/builder/array_constructor.go:14:6: exported type ArrayElementFunc should have comment or be unexported
bson/builder/array_constructor.go:16:1: exported method ArrayElementFunc.ArrayElement should have comment or be unexported
bson/builder/builder.go:20:6: exported type Constructor should have comment or be unexported
bson/builder/builder.go:21:6: exported type ArrayConstructor should have comment or be unexported
bson/builder/builder.go:29:6: exported type ElementFunc should have comment or be unexported
bson/builder/builder.go:31:1: exported method ElementFunc.Element should have comment or be unexported
bson/builder/builder.go:121:1: exported method DocumentBuilder.Element should have comment or be unexported
bson/constructor.go:15:6: exported type Constructor should have comment or be unexported
bson/constructor.go:16:6: exported type ArrayConstructor should have comment or be unexported
bson/internal/jsonparser/bytes.go:9:10: should omit type bool from declaration of var neg; it will be inferred from the right-hand side
bson/internal/jsonparser/bytes.go:25:9: if block ends with a return statement, so drop this else and outdent its block
bson/internal/jsonparser/escape.go:113:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/escape.go:123:1: comment on exported function Unescape should be of the form "Unescape ..."
bson/internal/jsonparser/parser.go:14:2: error var KeyPathNotFoundError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:15:2: error var UnknownValueTypeError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:16:2: error var MalformedJsonError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:16:2: var MalformedJsonError should be MalformedJSONError
bson/internal/jsonparser/parser.go:17:2: error var MalformedStringError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:18:2: error var MalformedArrayError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:19:2: error var MalformedObjectError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:20:2: error var MalformedValueError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:21:2: error var MalformedStringEscapeError should have name of the form ErrFoo
bson/internal/jsonparser/parser.go:147:11: if block ends with a return statement, so drop this else and outdent its block
bson/internal/jsonparser/parser.go:285:6: should replace curIdx += 1 with curIdx++
bson/internal/jsonparser/parser.go:292:12: if block ends with a return statement, so drop this else and outdent its block
bson/internal/jsonparser/parser.go:303:12: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:329:6: don't use underscores in Go names; range var pi_1 should be pi1
bson/internal/jsonparser/parser.go:329:12: don't use underscores in Go names; range var p_1 should be p1
bson/internal/jsonparser/parser.go:338:1: exported function EachKey should have comment or be unexported
bson/internal/jsonparser/parser.go:489:6: should replace curIdx += 1 with curIdx++
bson/internal/jsonparser/parser.go:503:12: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:517:1: comment on exported type ValueType should be of the form "ValueType ..." (with optional leading article)
bson/internal/jsonparser/parser.go:521:2: exported const NotExist should have comment (or a comment on this block) or be unexported
bson/internal/jsonparser/parser.go:582:1: comment on exported function Delete should be of the form "Delete ..."
bson/internal/jsonparser/parser.go:931:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:971:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:980:11: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:1006:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:1021:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:1128:9: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:1133:1: comment on exported function ParseFloat should be of the form "ParseFloat ..."
bson/internal/jsonparser/parser.go:1137:9: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser.go:1146:9: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)
bson/internal/jsonparser/parser_test.go:1361:5: var testJson should be testJSON
bson/internal/jsonpretty/pretty.go:7:1: comment on exported type Options should be of the form "Options ..." (with optional leading article)
